500,  0.95,
1000, 0.85,
5000, 0.70),
tbl_credits =
tribble(
~credit,       ~value,
"new home",    0.2,
"claims free", 0.1,
"multipolicy", 0.08),
tbl_jewelry =
tribble(
~jewelry_limit, ~value,
2500, 0,
5000, 35,
10000, 60),
tbl_increased_liability =
tribble(
~limit_liability_medpay, ~value,
"$100,000/$500",   0,
"$300,000/$1,000", 25,
"$500,000/$2,500", 45),
tbl_expense_fee =
tribble(
~form, ~value,
"HO3", 50)
)
ho_rate_tables
tribble(
~rate_book, ~complexity,
"Homeowners", ho_rate_tables %>% sapply(nrow) %>% prod
)
# Number of records we want to generate.
n_draw <- 10000
# For each table, draw n_draw random numbers.
uniform_dist_iid <-
ho_rate_tables %>%
lapply(
function(x) {
nrow(x) %>%
sample(n_draw, replace = TRUE) %>%
lapply(function(y) x[y, -ncol(x)]) %>% bind_rows}) %>%
bind_cols %>%
cbind(policy_number = 1:nrow(.) %>% str_pad(nchar(n_draw), pad = "0"), .)
uniform_dist_iid %>% as_tibble
# Need to use the formula we already laid out above somehow.  This is just to keep going.
uniform_dist_iid_rating <-
ho_rate_tables %>%
lapply(function(x) (x %>% right_join(uniform_dist_iid))$value) %>%
bind_rows %>%
mutate(
premium =
tbl_base *
tbl_aoi *
tbl_territory *
tbl_protection_class *
tbl_uw_tier *
tbl_deductible *
(1 - tbl_credits) +
tbl_jewelry +
tbl_increased_liability +
tbl_expense_fee,
premium = premium %>% round
)
# Inpute premium data onto rating data
uniform_dist_iid <-
uniform_dist_iid %>%
cbind(premium = uniform_dist_iid_rating$premium) %>%
mutate_if(is.character, factor)
uniform_dist_iid %>%
ggplot +
geom_bar(aes(x = premium))
library(keras)
# keras::install_keras(tensorflow = "gpu")
set.seed(5555)
index_sample <- sample(0.8 * nrow(uniform_dist_iid))
x_train <- uniform_dist_iid[ index_sample,] %>% select(-premium, -policy_number, -peril)
y_train <- uniform_dist_iid[ index_sample,] %>% select( premium) %>% as.matrix
x_test  <- uniform_dist_iid[-index_sample,] %>% select(-premium, -policy_number, -peril)
y_test  <- uniform_dist_iid[-index_sample,] %>% select( premium) %>% as.matrix
x_train <-
x_train %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
x_test <-
x_test %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
model <-
keras_model_sequential() %>%
layer_dense(units = 50, activation = 'linear') %>%
layer_dense(units = 30, activation = 'relu') %>%
layer_dense(units = 1 , activation = 'relu')
install_tensorflow()
library(tensorflow)
install_tensorflow(version = "gpu")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
tbl_algorithm <-
tribble(
~variable, ~operation, ~rate_table,
"All-Peril Base Rate", "+", "tbl_base",
"AOI Relativity", "x", "tbl_aoi",
"Territory Relativity", "x", "tbl_territory",
"Protection Class / Construction Type Relativity", "x", "tbl_protection_class",
"Underwriting Tier Relativity", "x", "tbl_uw_tier",
"Deductible Credit", "x", "tbl_deductible",
"New Home Discount", "x [1 - .]", "tbl_credits",
"Claims-Free Discount", "x [1 - .]", "tbl_credits",
"Multi-Policy Discount", "x [1 - .]", "tbl_credits",
"Increased Jewelry Coverage Rate", "+", "tbl_jewelry",
"Increased Liability/Medical Coverage Rate", "+", "tbl_increased_liability",
"Policy Fee", "+", "tbl_expense_fee"
)
tbl_algorithm %>%
transmute(
expression = variable %>% paste0(" (", ., ")"),
expression =
if_else(
operation %>% str_detect("\\."),
operation %>% str_replace("\\.", expression),
map2_chr(operation, expression, function(x,y) paste0(x, y, collapse = " "))
))
tbl_algorithm %>%
select(-operation) %>%
knitr::kable(format = "html") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
ho_rate_tables <-
list(
# Base rate
tbl_base =
tribble(
~peril,     ~value,
"all_perils", 500),
tbl_aoi =
tribble(
~aoi,     ~value,
80 ,0.56
,95 ,0.63
,110,0.69
,125,0.75
,140,0.81
,155,0.86
,170,0.91
,185,0.96
,200,1.00
,215,1.04
,230,1.08
,245,1.12
,260,1.16
,275,1.20
,290,1.24
,305,1.28
,320,1.32
,335,1.36
,350,1.39
,365,1.42
,380,1.45
,395,1.48
,410,1.51
,425,1.54
,440,1.57
,455,1.60
,470,1.63
,485,1.66
,500,1.69
,15 ,0.03),
tbl_territory =
tribble(
~territory,     ~value,
1,0.80,
2,0.90,
3,1.00,
4,1.10,
5,1.15),
tbl_protection_class =
tribble(
~protection_class, ~construction_type, ~value,
1, "frame",  1.00,
2, "frame",  1.00,
3, "frame",  1.00,
4, "frame",  1.00,
5, "frame",  1.05,
6, "frame",  1.10,
7, "frame",  1.15,
8, "frame",  1.25,
9, "frame",  2.10,
10,"frame",  2.30,
1, "masonry",0.90,
2, "masonry",0.90,
3, "masonry",0.90,
4, "masonry",0.90,
5, "masonry",1.00,
6, "masonry",1.05,
7, "masonry",1.10,
8, "masonry",1.15,
9, "masonry",1.75,
10,"masonry",1.90),
tbl_uw_tier =
tibble(
uw_tier = LETTERS[1:10],
value    = 1:10 * 0.12 + 0.7),
tbl_deductible =
tribble(
~deductible, ~value,
250,  1.00,
500,  0.95,
1000, 0.85,
5000, 0.70),
tbl_credits =
tribble(
~credit,       ~value,
"new home",    0.2,
"claims free", 0.1,
"multipolicy", 0.08),
tbl_jewelry =
tribble(
~jewelry_limit, ~value,
2500, 0,
5000, 35,
10000, 60),
tbl_increased_liability =
tribble(
~limit_liability_medpay, ~value,
"$100,000/$500",   0,
"$300,000/$1,000", 25,
"$500,000/$2,500", 45),
tbl_expense_fee =
tribble(
~form, ~value,
"HO3", 50)
)
ho_rate_tables
tribble(
~rate_book, ~complexity,
"Homeowners", ho_rate_tables %>% sapply(nrow) %>% prod
)
# Number of records we want to generate.
n_draw <- 10000
# For each table, draw n_draw random numbers.
uniform_dist_iid <-
ho_rate_tables %>%
lapply(
function(x) {
nrow(x) %>%
sample(n_draw, replace = TRUE) %>%
lapply(function(y) x[y, -ncol(x)]) %>% bind_rows}) %>%
bind_cols %>%
cbind(policy_number = 1:nrow(.) %>% str_pad(nchar(n_draw), pad = "0"), .)
uniform_dist_iid %>% as_tibble
# Need to use the formula we already laid out above somehow.  This is just to keep going.
uniform_dist_iid_rating <-
ho_rate_tables %>%
lapply(function(x) (x %>% right_join(uniform_dist_iid))$value) %>%
bind_rows %>%
mutate(
premium =
tbl_base *
tbl_aoi *
tbl_territory *
tbl_protection_class *
tbl_uw_tier *
tbl_deductible *
(1 - tbl_credits) +
tbl_jewelry +
tbl_increased_liability +
tbl_expense_fee,
premium = premium %>% round
)
# Inpute premium data onto rating data
uniform_dist_iid <-
uniform_dist_iid %>%
cbind(premium = uniform_dist_iid_rating$premium) %>%
mutate_if(is.character, factor)
uniform_dist_iid %>%
ggplot +
geom_bar(aes(x = premium))
library(keras)
# keras::install_keras(tensorflow = "gpu")
set.seed(5555)
index_sample <- sample(0.8 * nrow(uniform_dist_iid))
x_train <- uniform_dist_iid[ index_sample,] %>% select(-premium, -policy_number, -peril)
y_train <- uniform_dist_iid[ index_sample,] %>% select( premium) %>% as.matrix
x_test  <- uniform_dist_iid[-index_sample,] %>% select(-premium, -policy_number, -peril)
y_test  <- uniform_dist_iid[-index_sample,] %>% select( premium) %>% as.matrix
x_train <-
x_train %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
x_test <-
x_test %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
model <-
keras_model_sequential() %>%
layer_dense(units = 50, activation = 'linear') %>%
layer_dense(units = 30, activation = 'relu') %>%
layer_dense(units = 1 , activation = 'relu')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
tbl_algorithm <-
tribble(
~variable, ~operation, ~rate_table,
"All-Peril Base Rate", "+", "tbl_base",
"AOI Relativity", "x", "tbl_aoi",
"Territory Relativity", "x", "tbl_territory",
"Protection Class / Construction Type Relativity", "x", "tbl_protection_class",
"Underwriting Tier Relativity", "x", "tbl_uw_tier",
"Deductible Credit", "x", "tbl_deductible",
"New Home Discount", "x [1 - .]", "tbl_credits",
"Claims-Free Discount", "x [1 - .]", "tbl_credits",
"Multi-Policy Discount", "x [1 - .]", "tbl_credits",
"Increased Jewelry Coverage Rate", "+", "tbl_jewelry",
"Increased Liability/Medical Coverage Rate", "+", "tbl_increased_liability",
"Policy Fee", "+", "tbl_expense_fee"
)
tbl_algorithm %>%
transmute(
expression = variable %>% paste0(" (", ., ")"),
expression =
if_else(
operation %>% str_detect("\\."),
operation %>% str_replace("\\.", expression),
map2_chr(operation, expression, function(x,y) paste0(x, y, collapse = " "))
))
tbl_algorithm %>%
select(-operation) %>%
knitr::kable(format = "html") %>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
ho_rate_tables <-
list(
# Base rate
tbl_base =
tribble(
~peril,     ~value,
"all_perils", 500),
tbl_aoi =
tribble(
~aoi,     ~value,
80 ,0.56
,95 ,0.63
,110,0.69
,125,0.75
,140,0.81
,155,0.86
,170,0.91
,185,0.96
,200,1.00
,215,1.04
,230,1.08
,245,1.12
,260,1.16
,275,1.20
,290,1.24
,305,1.28
,320,1.32
,335,1.36
,350,1.39
,365,1.42
,380,1.45
,395,1.48
,410,1.51
,425,1.54
,440,1.57
,455,1.60
,470,1.63
,485,1.66
,500,1.69
,15 ,0.03),
tbl_territory =
tribble(
~territory,     ~value,
1,0.80,
2,0.90,
3,1.00,
4,1.10,
5,1.15),
tbl_protection_class =
tribble(
~protection_class, ~construction_type, ~value,
1, "frame",  1.00,
2, "frame",  1.00,
3, "frame",  1.00,
4, "frame",  1.00,
5, "frame",  1.05,
6, "frame",  1.10,
7, "frame",  1.15,
8, "frame",  1.25,
9, "frame",  2.10,
10,"frame",  2.30,
1, "masonry",0.90,
2, "masonry",0.90,
3, "masonry",0.90,
4, "masonry",0.90,
5, "masonry",1.00,
6, "masonry",1.05,
7, "masonry",1.10,
8, "masonry",1.15,
9, "masonry",1.75,
10,"masonry",1.90),
tbl_uw_tier =
tibble(
uw_tier = LETTERS[1:10],
value    = 1:10 * 0.12 + 0.7),
tbl_deductible =
tribble(
~deductible, ~value,
250,  1.00,
500,  0.95,
1000, 0.85,
5000, 0.70),
tbl_credits =
tribble(
~credit,       ~value,
"new home",    0.2,
"claims free", 0.1,
"multipolicy", 0.08),
tbl_jewelry =
tribble(
~jewelry_limit, ~value,
2500, 0,
5000, 35,
10000, 60),
tbl_increased_liability =
tribble(
~limit_liability_medpay, ~value,
"$100,000/$500",   0,
"$300,000/$1,000", 25,
"$500,000/$2,500", 45),
tbl_expense_fee =
tribble(
~form, ~value,
"HO3", 50)
)
ho_rate_tables
tribble(
~rate_book, ~complexity,
"Homeowners", ho_rate_tables %>% sapply(nrow) %>% prod
)
# Number of records we want to generate.
n_draw <- 10000
# For each table, draw n_draw random numbers.
uniform_dist_iid <-
ho_rate_tables %>%
lapply(
function(x) {
nrow(x) %>%
sample(n_draw, replace = TRUE) %>%
lapply(function(y) x[y, -ncol(x)]) %>% bind_rows}) %>%
bind_cols %>%
cbind(policy_number = 1:nrow(.) %>% str_pad(nchar(n_draw), pad = "0"), .)
uniform_dist_iid %>% as_tibble
# Need to use the formula we already laid out above somehow.  This is just to keep going.
uniform_dist_iid_rating <-
ho_rate_tables %>%
lapply(function(x) (x %>% right_join(uniform_dist_iid))$value) %>%
bind_rows %>%
mutate(
premium =
tbl_base *
tbl_aoi *
tbl_territory *
tbl_protection_class *
tbl_uw_tier *
tbl_deductible *
(1 - tbl_credits) +
tbl_jewelry +
tbl_increased_liability +
tbl_expense_fee,
premium = premium %>% round
)
# Inpute premium data onto rating data
uniform_dist_iid <-
uniform_dist_iid %>%
cbind(premium = uniform_dist_iid_rating$premium) %>%
mutate_if(is.character, factor)
uniform_dist_iid %>%
ggplot +
geom_bar(aes(x = premium))
library(keras)
# keras::install_keras(tensorflow = "gpu")
set.seed(5555)
index_sample <- sample(0.8 * nrow(uniform_dist_iid))
x_train <- uniform_dist_iid[ index_sample,] %>% select(-premium, -policy_number, -peril)
y_train <- uniform_dist_iid[ index_sample,] %>% select( premium) %>% as.matrix
x_test  <- uniform_dist_iid[-index_sample,] %>% select(-premium, -policy_number, -peril)
y_test  <- uniform_dist_iid[-index_sample,] %>% select( premium) %>% as.matrix
x_train <-
x_train %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
x_test <-
x_test %>%
mutate_if(is.factor, as.numeric) %>%
mutate_if(is.factor, to_categorical) %>%
bind_cols %>%
as.matrix
model <-
keras_model_sequential() %>%
layer_dense(units = 50, activation = 'linear') %>%
layer_dense(units = 30, activation = 'relu') %>%
layer_dense(units = 1 , activation = 'relu')
keras::install_keras(tensorflow = "gpu")
